syntax = "proto3";

package mavsdk.rpc.param;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.param";
option java_outer_classname = "ParamProto";

// Provide raw access to get and set parameters.
service ParamService {
    /*
     * Get an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     */
    rpc GetParamInt(GetParamIntRequest) returns(GetParamIntResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set an int parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     */
    rpc SetParamInt(SetParamIntRequest) returns(SetParamIntResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Get a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     */
    rpc GetParamFloat(GetParamFloatRequest) returns(GetParamFloatResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set a float parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     */
    rpc SetParamFloat(SetParamFloatRequest) returns(SetParamFloatResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Get a custom parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     */
    rpc GetParamCustom(GetParamCustomRequest) returns(GetParamCustomResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set a custom parameter.
     *
     * If the type is wrong, the result will be `WRONG_TYPE`.
     */
    rpc SetParamCustom(SetParamCustomRequest) returns(SetParamCustomResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Get all parameters.
     */
    rpc GetAllParams(GetAllParamsRequest) returns(GetAllParamsResponse) { option (mavsdk.options.async_type) = SYNC; }
}

message GetParamIntRequest {
    string name = 1; // Name of the parameter
}

message GetParamIntResponse {
    ParamResult param_result = 1;
    int32 value = 2; // Value of the requested parameter
}

message SetParamIntRequest {
    string name = 1; // Name of the parameter to set
    int32 value = 2; // Value the parameter should be set to
}
message SetParamIntResponse {
    ParamResult param_result = 1;
}

message GetParamFloatRequest {
    string name = 1; // Name of the parameter
}
message GetParamFloatResponse {
    ParamResult param_result = 1;
    float value = 2; // Value of the requested parameter
}

message SetParamFloatRequest {
    string name = 1; // Name of the parameter to set
    float value = 2; // Value the parameter should be set to
}
message SetParamFloatResponse {
    ParamResult param_result = 1;
}

message GetParamCustomRequest {
    string name = 1; // Name of the parameter
}
message GetParamCustomResponse {
    ParamResult param_result = 1;
    string value = 2; // Value of the requested parameter
}

message SetParamCustomRequest {
    string name = 1; // Name of the parameter to set
    string value = 2; // Value the parameter should be set to
}
message SetParamCustomResponse {
    ParamResult param_result = 1;
}

message GetAllParamsRequest {}

message GetAllParamsResponse {
    AllParams params = 1; // Collection of all parameters
}

/*
 * Type for integer parameters.
 */
message IntParam {
    string name = 1; // Name of the parameter
    int32 value = 2; // Value of the parameter
}

/*
 * Type for float parameters.
 */
message FloatParam {
    string name = 1; // Name of the parameter
    float value = 2; // Value of the parameter
}

/*
 * Type for custom parameters
 */
message CustomParam {
    string name = 1; // Name of the parameter
    string value = 2; // Value of the parameter (max len 128 bytes)
}

/*
 * Type collecting all integer, float, and custom parameters.
 */
message AllParams {
    repeated IntParam int_params = 1; // Collection of all parameter names and values of type int
    repeated FloatParam float_params = 2; // Collection of all parameter names and values of type float
    repeated CustomParam custom_params = 3; // Collection of all parameter names and values of type custom
}

// Result type.
message ParamResult {
    // Possible results returned for param requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_TIMEOUT = 2; // Request timed out
        RESULT_CONNECTION_ERROR = 3; // Connection error
        RESULT_WRONG_TYPE = 4; // Wrong type
        RESULT_PARAM_NAME_TOO_LONG = 5; // Parameter name too long (> 16)
        RESULT_NO_SYSTEM = 6; // No system connected
        RESULT_PARAM_VALUE_TOO_LONG = 7; // Param value too long (> 128)
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
